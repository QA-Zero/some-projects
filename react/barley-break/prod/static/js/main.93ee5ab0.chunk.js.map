{"version":3,"sources":["app/api/store/storage/dev_tools.js","app/api/store/reducers/index.js","app/api/store/reducers/game.js","app/const/actionTypes.js","app/api/store/storage/index.js","assets/themes/MainTheme.js","app/api/store/selectors/index.js","app/api/ui/index.js","app/const/cells.js","app/api/utils/index.js","app/api/store/actions/index.js","app/blocks/containers/SingleCell.js","app/blocks/components/SingleCell.jsx","app/blocks/components/MainPage.jsx","app/blocks/containers/MainPage.js","index.js","app/blocks/AppMain.js"],"names":["devTools","window","devToolsEnhancer","composeWithDevTools","name","realtime","hostname","port","combineReducers","game","state","arguments","length","undefined","cells","emptyIndex","isGaming","isAnimation","action","type","Object","objectSpread","configureStore","initialState","middlewares","thunk","enhancers","applyMiddleware","apply","createStore","rootReducer","compose","createMuiTheme","typography","useNextVariants","getCells","getEmptyIndex","getStatusAnimation","animateCell","cellRef","direction","steps","style","top","bottom","left","right","directions","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","updateCellsDirs","map","cell","index","number","dirTotal","dirCurrent","forEach","swapCells","temp","checkGameStatus","result","updateCells","dispatch","startAnimation","finishAnimation","startGame","cellsInfo","i","push","sort","Math","random","generateCells","startNewGame","connect","reactConnect","dispatchProps","ownProps","moveCell","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","swappedCells","updatedCells","wrap","_context","prev","next","Promise","resolve","loop","currentStep","setTimeout","JSON","parse","stringify","stop","this","animating","then","size","singleStep","content","createRef","cellTotal","width","height","lvlBack","lineHeight","fontSize","lvlFront","backgroundColor","zIndex","border","half","borderLeft","borderRight","borderTop","cursor","transform","marginTop","marginLeft","react_default","createElement","className","ref","onClick","current","MainPage","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleRestart","statusValue","_this$props","stylesStatus","color","stylesField","containers_SingleCell","key","Button_default","Component","getStatusGame","app","styles","theme","es","store","containers_MainPage","root","document","getElementById","render"],"mappings":"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","file":"static/js/main.93ee5ab0.chunk.js","sourcesContent":["import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nexport const devTools = window.devToolsEnhancer || composeWithDevTools({\r\n\t    name: 'AppMainWrapper.appRoutes appRoutes',\r\n\trealtime: true,\r\n\thostname: 'localhost',\r\n\t    port: 8000\r\n});","import { combineReducers } from 'redux';\r\nimport game from './game.js';\r\n\r\n\r\nexport default combineReducers({ game });","import {\r\n    START_NEW_GAME,\r\n\tUPDATE_CELLS,\r\n    START_ANIMATION,\r\n    FINISH_ANIMATION\r\n} from '$const/actionTypes';\r\n\r\n\r\nexport default (\r\n\tstate  = {\r\n\t\t      cells: [],\r\n\t\t emptyIndex: -1,\r\n\t\t   isGaming: true,\r\n        isAnimation: false\r\n\t},\r\n\taction = {}\r\n) => {\r\n\tswitch (action.type) {\r\n        case START_NEW_GAME: {\r\n            return {\r\n                      cells: [],\r\n                 emptyIndex: -1,\r\n                   isGaming: true,\r\n                isAnimation: false\r\n            };\r\n        }\r\n        case UPDATE_CELLS: {\r\n            return {\r\n\t\t\t\t...state,\r\n\t\t\t\t     cells: action.cells,\r\n                emptyIndex: action.emptyIndex\r\n\t\t\t};\r\n        }\r\n        case START_ANIMATION: {\r\n            return {\r\n                ...state,\r\n                isAnimation: true\r\n            };\r\n        }\r\n        case FINISH_ANIMATION: {\r\n            return {\r\n                ...state,\r\n                isAnimation: false,\r\n                   isGaming: action.isGaming\r\n            };\r\n        }\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n};","export const START_NEW_GAME   = 'START_NEW_GAME';\r\nexport const UPDATE_CELLS     = 'UPDATE_CELLS';\r\nexport const START_ANIMATION  = 'START_ANIMATION';\r\nexport const FINISH_ANIMATION = 'FINISH_ANIMATION';","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { devTools } from './dev_tools.js';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '$store/reducers/index';\r\n\r\n\r\nconst configureStore = (initialState) => {\r\n\tconst middlewares = [ thunk\t];\r\n\tconst enhancers = [\r\n\t\tapplyMiddleware(...middlewares),\r\n        devTools()\r\n\t];\r\n\r\n\treturn createStore(\r\n        rootReducer,\r\n\t\tinitialState,\r\n\t\tcompose(...enhancers)\r\n\t);\r\n};\r\n\r\n\r\nexport default configureStore({});","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n\r\nexport default createMuiTheme({\r\n\ttypography: {\r\n\t\tuseNextVariants: true,\r\n\t}\r\n});","export const getCells           = state => state.game.cells;\r\nexport const getEmptyIndex      = state => state.game.emptyIndex;\r\nexport const getStatusGame      = state => state.game.isGaming;\r\nexport const getStatusAnimation = state => state.game.isAnimation;","import { singleStep } from '$const/cells';\r\n\r\n\r\nexport const animateCell = (cellRef, direction, steps) => {\r\n    if (steps === 0) {\r\n        cellRef.style.top = 0;\r\n        cellRef.style.bottom = 0;\r\n        cellRef.style.left = 0;\r\n        cellRef.style.right = 0;\r\n    }\r\n    else {\r\n        switch (direction) {\r\n            case 'top': {\r\n                cellRef.style.top = -steps * singleStep + 'px';\r\n                cellRef.style.bottom = steps * singleStep + 'px';\r\n                break;\r\n            }\r\n            case 'right': {\r\n                cellRef.style.left = steps * singleStep + 'px';\r\n                cellRef.style.right = -steps * singleStep + 'px';\r\n                break;\r\n            }\r\n            case 'bottom': {\r\n                cellRef.style.top = steps * singleStep + 'px';\r\n                cellRef.style.bottom = -steps * singleStep + 'px';\r\n                break;\r\n            }\r\n            case 'left': {\r\n                cellRef.style.left = -steps * singleStep + 'px';\r\n                cellRef.style.right = steps * singleStep + 'px';\r\n                break;\r\n            }\r\n\r\n            default: {}\r\n        }\r\n    }\r\n};","export const singleStep = 25;\r\n\r\nexport const delay      = 150;\r\nexport const steps      = 4;\r\nexport const size       = singleStep * steps;\r\n// timeMovie            = delay * steps","const directions = {\r\n     1: [ 1, 4 ],\r\n     2: [ 1, 4, -1 ],\r\n     3: [ 1, 4, -1 ],\r\n     4: [ 4, -1 ],\r\n     5: [ -4, 1, 4 ],\r\n     6: [ -4, 1, 4, -1 ],\r\n     7: [ -4, 1, 4, -1 ],\r\n     8: [ -4, 4, -1 ],\r\n     9: [ -4, 1, 4 ],\r\n    10: [ -4, 1, 4, -1 ],\r\n    11: [ -4, 1, 4, -1 ],\r\n    12: [ -4, 4, -1 ],\r\n    13: [ -4, 1 ],\r\n    14: [ -4, 1, -1 ],\r\n    15: [ -4, 1, -1 ],\r\n    16: [ -4, -1 ]\r\n};\r\nexport const updateCellsDirs = (cells, emptyIndex, isGaming) => (\r\n    cells\r\n        .map(\r\n            (cell, index) => cell.number === 0 ? cell : {\r\n                ...cell,\r\n                dirTotal: directions[index + 1]\r\n            }\r\n        ).map(\r\n            (cell, index) => {\r\n                if (index === emptyIndex) {\r\n                    return cell;\r\n                }\r\n                else {\r\n                    cell.dirCurrent = false;\r\n\r\n                    if (isGaming) {\r\n                        cell.dirTotal.forEach(\r\n                            direction => {\r\n                                if (index + direction === emptyIndex) {\r\n                                    switch (direction) {\r\n                                        case -4: {\r\n                                            cell.dirCurrent = 'top';\r\n                                            break;\r\n                                        }\r\n                                        case 1: {\r\n                                            cell.dirCurrent = 'right';\r\n                                            break;\r\n                                        }\r\n                                        case 4: {\r\n                                            cell.dirCurrent = 'bottom';\r\n                                            break;\r\n                                        }\r\n                                        case -1: {\r\n                                            cell.dirCurrent = 'left';\r\n                                            break;\r\n                                        }\r\n\r\n                                        default: {}\r\n                                    }\r\n                                }\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                    return cell;\r\n                }\r\n            }\r\n        )\r\n);\r\n\r\n\r\nexport const generateCells = () => {\r\n    const cells = [];\r\n\r\n    for (let i = 0; i < 16; i++) {\r\n        cells.push(\r\n            { number: i }\r\n        );\r\n    }\r\n\r\n    cells.sort(\r\n        () => Math.random() - 0.5\r\n    );\r\n    // cells.splice(0, 1);\r\n    // cells.push( { number: 0 } );\r\n\r\n    const getEmptyIndex = () => {\r\n        let emptyIndex = -1;\r\n\r\n        cells.forEach(\r\n            (cell, index) => {\r\n                if (cell['number'] === 0) {\r\n                    emptyIndex = index;\r\n                }\r\n            }\r\n        );\r\n\r\n        return emptyIndex;\r\n    };\r\n    const emptyIndex = getEmptyIndex();\r\n\r\n    return {\r\n        cells: updateCellsDirs(cells, emptyIndex, true),\r\n        emptyIndex\r\n    };\r\n};\r\nexport const swapCells = (cells, emptyIndex, index) => {\r\n    const temp = cells[emptyIndex];\r\n    cells[emptyIndex] = cells[index];\r\n    cells[index] = temp;\r\n\r\n    return cells;\r\n};\r\nexport const checkGameStatus = cells => {\r\n    let result = false;\r\n\r\n    cells.forEach(\r\n        (cell, index) => {\r\n            if (\r\n                cell.number !== 0\r\n                &&\r\n                cell.number !== index + 1\r\n            ) {\r\n                result =  true;\r\n            }\r\n        }\r\n    );\r\n\r\n    return result;\r\n};","import {\r\n    START_NEW_GAME,\r\n    UPDATE_CELLS,\r\n    START_ANIMATION,\r\n    FINISH_ANIMATION\r\n} from '$const/actionTypes';\r\nimport { getCells, getEmptyIndex } from '$store/selectors/index';\r\nimport { steps, delay } from '$const/cells';\r\nimport { animateCell } from '$ui/index'\r\nimport { generateCells, swapCells, updateCellsDirs, checkGameStatus } from '$utils/index';\r\n\r\n\r\nconst startNewGame = dispatch => {\r\n    dispatch({\r\n        type: START_NEW_GAME\r\n    });\r\n};\r\nconst updateCells = (dispatch, cells, emptyIndex) => {\r\n    dispatch({\r\n        type: UPDATE_CELLS,\r\n        cells,\r\n        emptyIndex\r\n    });\r\n};\r\nconst startAnimation = dispatch => {\r\n    dispatch({\r\n        type: START_ANIMATION\r\n    });\r\n};\r\nconst finishAnimation = (dispatch, isGaming) => {\r\n    dispatch({\r\n        type: FINISH_ANIMATION,\r\n        isGaming\r\n    });\r\n};\r\n\r\n\r\nexport const startGame = dispatch => {\r\n    const cellsInfo = generateCells();\r\n\r\n    startNewGame(dispatch);\r\n    updateCells(dispatch, cellsInfo.cells, cellsInfo.emptyIndex);\r\n};\r\nexport const moveCell = (state, dispatch, index, cellRef, direction) => {\r\n    const animating = async () => {\r\n        await new Promise(\r\n            resolve => {\r\n                const loop = currentStep => {\r\n                    currentStep++;\r\n                    startAnimation(dispatch);\r\n                    animateCell(cellRef, direction, currentStep);\r\n\r\n                    if (currentStep < steps) {\r\n                        setTimeout(\r\n                            () => {\r\n                                loop(currentStep)\r\n                            },\r\n                            delay\r\n                        )\r\n                    }\r\n                    else {\r\n                        animateCell(cellRef, direction, 0);\r\n                        resolve();\r\n                    }\r\n                };\r\n                loop(0);\r\n            }\r\n        );\r\n\r\n        const swappedCells = swapCells(\r\n            JSON.parse(JSON.stringify(getCells(state))),\r\n            getEmptyIndex(state),\r\n            index\r\n        );\r\n        const isGaming = checkGameStatus(swappedCells);\r\n        const updatedCells = updateCellsDirs(swappedCells, index, isGaming);\r\n\r\n        finishAnimation(dispatch, isGaming);\r\n        updateCells(dispatch, updatedCells, index);\r\n    };\r\n\r\n    animating().then();\r\n};","import { connect as reactConnect } from 'react-redux';\r\nimport { moveCell } from '$store/actions/index';\r\nimport { size, singleStep } from '$const/cells';\r\nimport { getStatusAnimation } from '$store/selectors/index';\r\nimport SingleCell from '$comp/SingleCell';\r\n\r\n\r\nconst mergeProps = (state, dispatchProps, ownProps) => {\r\n    const { dispatch } = dispatchProps;\r\n\r\n    return {\r\n        moveCell: (cellRef, direction) => moveCell(\r\n            state,\r\n            dispatch,\r\n            ownProps.index,\r\n            cellRef,\r\n            direction\r\n        ),\r\n        isAnimation: getStatusAnimation(state),\r\n        size,\r\n        singleStep,\r\n           number: ownProps.number,\r\n        direction: ownProps.direction\r\n    };\r\n};\r\nconst connect = reactConnect(\r\n    state => state,\r\n    null,\r\n    mergeProps\r\n);\r\n\r\n\r\nexport default connect(SingleCell);","import React, { createRef } from 'react';\r\n\r\nimport '$assets/styles/SingleCell.css';\r\n\r\n\r\nexport default ({ moveCell, number, size, singleStep, direction, isAnimation }) => {\r\n    const cellRef = createRef();\r\n\r\n    const handleClick = () => {\r\n        moveCell(cellRef.current, direction);\r\n    };\r\n\r\n    const cellTotal = {\r\n        width: size + 'px',\r\n        height: size + 'px'\r\n    };\r\n    const lvlBack = {\r\n        lineHeight: size + 'px',\r\n        fontSize: singleStep * 3 + 'px'\r\n    };\r\n    const lvlFront = {};\r\n\r\n    let content;\r\n\r\n    if (number === 0) {\r\n        content = '';\r\n        lvlBack.backgroundColor = '#aaa';\r\n        cellTotal.zIndex = 1;\r\n    }\r\n    else {\r\n        content = number;\r\n        cellTotal.border = '2px solid #222';\r\n        cellTotal.zIndex = 2;\r\n        lvlBack.backgroundColor = '#77f';\r\n\r\n        if (direction && !isAnimation) {\r\n            const half = size / 2 - 2;\r\n\r\n            lvlFront.borderLeft  = half + 'px solid transparent';\r\n            lvlFront.borderRight = half + 'px solid transparent';\r\n            lvlFront.borderTop   = half + 'px solid #55e';\r\n            cellTotal.cursor = 'pointer';\r\n\r\n            switch (direction) {\r\n                case 'top': {\r\n                    lvlFront.transform = 'rotate(180deg)';\r\n                    break;\r\n                }\r\n                case 'right': {\r\n                    lvlFront.marginTop  = half / 2 + 'px';\r\n                    lvlFront.marginLeft = half / 2 + 'px';\r\n                    lvlFront.transform  = 'rotate(-90deg)';\r\n                    break;\r\n                }\r\n                case 'bottom': {\r\n                    lvlFront.marginTop = half + 'px';\r\n                    lvlFront.transform = 'rotate(0deg)';\r\n                    break;\r\n                }\r\n                case 'left': {\r\n                    lvlFront.marginTop  = half / 2 + 'px';\r\n                    lvlFront.marginLeft =  - half / 2 + 'px';\r\n                    lvlFront.transform  = 'rotate(90deg)';\r\n                    break;\r\n                }\r\n\r\n                default: {}\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"cellTotal\"\r\n            style={cellTotal}\r\n            ref={cellRef}\r\n        >\r\n            <div\r\n                className=\"lvlBack\"\r\n                style={lvlBack}\r\n            >{content}</div>\r\n            <div\r\n                className=\"lvlFront\"\r\n                style={lvlFront}\r\n                onClick={handleClick}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport SingleCell from '$cont/SingleCell';\r\n\r\nimport '$assets/styles/MainPage.css';\r\n\r\n\r\nexport default class MainPage extends Component {\r\n    handleRestart = () => {\r\n        const { startGame } = this.props;\r\n        startGame();\r\n    };\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        props.startGame();\r\n    }\r\n\r\n    render() {\r\n        const { isAnimation, isGaming, cells, size } = this.props;\r\n        const stylesStatus = {};\r\n        let statusValue;\r\n\r\n        if (isGaming) {\r\n            statusValue = 'Gaming...';\r\n            stylesStatus.color = '#00a';\r\n        }\r\n        else {\r\n            statusValue = 'Winner!';\r\n            stylesStatus.color = '#0a0';\r\n        }\r\n\r\n        const stylesField = {\r\n             width: (size * 4 + 2 * 3) + 'px',\r\n            height: (size * 4 + 2 * 3) + 'px'\r\n        };\r\n\r\n        if (isAnimation) {\r\n            stylesField.cursor = 'wait';\r\n        }\r\n\r\n        return (\r\n            <div className=\"mainPage\">\r\n                <div\r\n                    className=\"status\"\r\n                    style={stylesStatus}\r\n                >{statusValue}</div>\r\n                <div\r\n                    className=\"field\"\r\n                    style={stylesField}\r\n                >\r\n                    {\r\n                        cells.map(\r\n                            (cell, index) => <SingleCell\r\n                                key={index}\r\n                                index={index}\r\n                                number={cell.number}\r\n                                direction={cell.dirCurrent}\r\n                            />\r\n                        )\r\n                    }\r\n                </div>\r\n                <Button\r\n                    className=\"btnRestart\"\r\n                    onClick={this.handleRestart}\r\n                >Restart</Button>\r\n            </div>\r\n        )\r\n    };\r\n}","import { connect as reactConnect } from 'react-redux';\r\nimport { startGame } from '$store/actions/index';\r\nimport { getCells, getStatusAnimation, getStatusGame } from '$store/selectors/index';\r\nimport { size } from '$const/cells';\r\nimport MainPage from '$comp/MainPage';\r\n\r\n\r\nconst mergeProps = (state, dispatchProps, ownProps) => {\r\n    const { dispatch } = dispatchProps;\r\n\r\n    return {\r\n                   cells: getCells(state),\r\n             isAnimation: getStatusAnimation(state),\r\n                isGaming: getStatusGame(state),\r\n        startGame: () => { startGame(dispatch) },\r\n        size,\r\n        ...ownProps\r\n    };\r\n};\r\nconst connect = reactConnect(\r\n    state => state,\r\n    null,\r\n    mergeProps\r\n);\r\n\r\n\r\nexport default connect(MainPage);","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './app/blocks/AppMain.js';\nimport '$assets/styles/index.css';\n\n\nconst app = <App />;\nconst root = document.getElementById('root');\n\nrender(app, root);","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from '$store/storage/index';\r\nimport theme from '$assets/themes/MainTheme';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport MainPage from '$cont/MainPage';\r\n\r\n\r\nexport default () => (\r\n    <MuiThemeProvider theme={theme}>\r\n\t\t<Provider store={store}>\r\n\t\t\t<MainPage />\r\n\t\t</Provider>\r\n    </MuiThemeProvider>\r\n);"],"sourceRoot":""}