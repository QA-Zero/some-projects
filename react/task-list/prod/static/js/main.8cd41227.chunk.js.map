{"version":3,"sources":["app/api/store/storage/dev_tools.js","app/const/defaultTasks.js","app/api/store/reducers/tasks.js","app/const/actionTypes.js","app/api/store/reducers/auth.js","app/api/store/storage/index.js","app/api/store/reducers/index.js","app/api/store/selectors/index.js","app/components/task_list/single_task/SingleTask.js","app/components/task_list/content/Content.js","app/components/task_list/content/index.js","app/const/credentials.js","app/components/auth_form/AuthForm.js","app/components/auth_form/index.js","assets/themes/MainTheme.js","app/index.js","app/routes/index.js","app/routes/appRoutes.js","index.js"],"names":["devTools","window","devToolsEnhancer","composeWithDevTools","name","realtime","hostname","port","history","createBrowserHistory","defaultTasks","id","taskName","userName","email","status","tasks","state","arguments","length","undefined","lastId","action","type","concat","Object","toConsumableArray","value","index","newTaskName","splice","auth","isAdmin","configureStore","initialState","middleWares","thunk","routerMiddleware","enhancers","applyMiddleware","apply","createStore","combineReducers","router","connectRouter","taskList","compose","getStatus","getTaskList","single_task_SingleTask","_ref","editTaskStart","react_default","a","createElement","className","Checkbox_default","checked","disabled","Button_default","onClick","PER_PAGE","Content","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCurrentList","activePage","listFull","other","temp","firstIndex","lastIndex","slice","getCurrentIndex","indexOnPage","getArrowClass","getClass","param","_this$state$sort","sort","getArrowStatus","handleEmailChange","e","target","userNameRef","current","taskNameAddRef","setState","fields","objectSpread","emailField","addFieldsEmpty","handleUserNameChange","emailRef","userNameField","handleTaskNameAddChange","taskNameAddField","handleTaskNameEditChange","taskNameEditField","editFieldsEmpty","handleEditTaskStart","editingIndex","isDoneField","handleEditTaskFinish","editTask","taskNameEditRef","doneRef","handleKeyDownAdd","keyCode","handleAddTask","handleKeyDownEdit","handleDoneChange","handleLogout","logout","handleLogin","push","addTask","handlePageChange","listOnCurrentPage","getListFullSorted","key","b","handleSortUsername","updateLists","handleSortEmail","handleSortStatus","createRef","prevProps","prevState","snapshot","_this2","_this$state$fields","_this$state$other","isEditing","isAddBlock","arrowClass","map","task","Pagination_default","hideDisabled","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","TextField_default","helperText","ref","onKeyDown","autoFocus","PureComponent","mapDispatchToProps","dispatch","path","routerPush","connect","reactConnect","credentials","login","password","AuthForm","handleLoginChange","handlePasswordChange","handleSignIn","_this$props","cred","showError","handleKeyDown","_this$state","core_TextField_default","placeholder","core_Button_default","createMuiTheme","typography","useNextVariants","app","styles","theme","es","store","esm","getUrls","Switch","route","Action","isExact","exact","assign","main","Route","component","TaskList","support","Redirect","from","to","root","document","getElementById","render"],"mappings":"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","file":"static/js/main.8cd41227.chunk.js","sourcesContent":["import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport const devTools = window.devToolsEnhancer || composeWithDevTools({\r\n\t    name: 'AppMainWrapper.appRoutes appRoutes',\r\n\trealtime: true,\r\n\thostname: 'localhost',\r\n\t    port: 8000\r\n});\r\nexport const history = createBrowserHistory();\r\n","export default [\r\n    {\r\n              id: 1,\r\n        taskName: 'Task-1',\r\n        userName: 'Vasya',\r\n           email: 'vasya@example.com',\r\n          status: false,\r\n    },\r\n    {\r\n              id: 2,\r\n        taskName: 'Task-2',\r\n        userName: 'Kolya',\r\n           email: 'kolya@example.com',\r\n          status: true,\r\n    },\r\n    {\r\n              id: 3,\r\n        taskName: 'Task-3',\r\n        userName: 'Petya',\r\n           email: 'petya@example.com',\r\n          status: false,\r\n    },\r\n    {\r\n              id: 4,\r\n        taskName: 'Task-4',\r\n        userName: 'Sasha',\r\n           email: 'sasha@example.com',\r\n          status: true,\r\n    },\r\n    {\r\n              id: 5,\r\n        taskName: 'Task-5',\r\n        userName: 'Artur',\r\n           email: 'artur@example.com',\r\n          status: false,\r\n    },\r\n    {\r\n              id: 6,\r\n        taskName: 'Task-6',\r\n        userName: 'Slavik',\r\n           email: 'slavik@example.com',\r\n          status: true,\r\n    },\r\n    {\r\n              id: 7,\r\n        taskName: 'Task-7',\r\n        userName: 'Ivan',\r\n           email: 'ivan@example.com',\r\n          status: false,\r\n    },\r\n];\r\n","import { ADD_TASK, DELETE_TASK, EDIT_TASK_NAME, DONE_TASK, UNDONE_TASK } from '$const/actionTypes';\r\nimport tasks from '$const/defaultTasks';\r\n\r\nexport default (\r\n    state  = { tasks, lastId: tasks.length },\r\n    action = {}\r\n) => {\r\n    switch (action.type) {\r\n        case ADD_TASK: {\r\n            return {\r\n                tasks: [\r\n                    ...state.tasks,\r\n                    {\r\n                              id: state.lastId + 1,\r\n                           email: action.value.email,\r\n                        userName: action.value.userName,\r\n                        taskName: action.value.taskName,\r\n                          status: false,\r\n                    }\r\n                ],\r\n                lastId: state.lastId + 1\r\n            };\r\n        }\r\n        case EDIT_TASK_NAME: {\r\n            state.tasks[action.value.index].taskName = action.value.newTaskName;\r\n            return state;\r\n        }\r\n        case DONE_TASK: {\r\n            state.tasks[action.value.index].status = true;\r\n            return state;\r\n        }\r\n\r\n        case UNDONE_TASK: {\r\n            state.tasks[action.value.index].status = false;\r\n            return state;\r\n        }\r\n        case DELETE_TASK: {\r\n            state.tasks[action.value.index].splice(action.value.index, 1);\r\n            return state;\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n","export const LOGIN          = 'LOGIN';\r\nexport const LOGOUT         = 'LOGOUT';\r\nexport const ADD_TASK       = 'ADD_TASK';\r\nexport const EDIT_TASK_NAME = 'EDIT_TASK_NAME';\r\nexport const DONE_TASK      = 'DONE_TASK';\r\n\r\nexport const UNDONE_TASK    = 'UNDONE_TASK';\r\nexport const DELETE_TASK    = 'DELETE_TASK';\r\n","import { LOGIN, LOGOUT } from '$const/actionTypes';\r\n\r\nexport default (\r\n\tstate  = { isAdmin: false },\r\n\taction = {}\r\n) => {\r\n\tswitch (action.type) {\r\n        case LOGIN: return { isAdmin: true };\r\n        case LOGOUT: return { isAdmin: false };\r\n\r\n\t\tdefault: return state;\r\n\t}\r\n};\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport { devTools, history } from './dev_tools';\r\nimport thunk from 'redux-thunk';\r\nimport createRootReducer from '$store/reducers/index';\r\n\r\nconst configureStore = (initialState) => {\r\n\tconst middleWares = [\r\n\t\tthunk,\r\n        routerMiddleware(history)\r\n\t];\r\n\tconst enhancers = [\r\n\t\tapplyMiddleware(...middleWares),\r\n        devTools()\r\n\t];\r\n\r\n\treturn createStore(\r\n        createRootReducer(history),\r\n\t\tinitialState,\r\n\t\tcompose(...enhancers)\r\n\t);\r\n};\r\n\r\nexport default configureStore({});\r\n","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router'\r\nimport taskList from './tasks';\r\nimport auth from './auth';\r\n\r\nexport default history => combineReducers({\r\n    router: connectRouter(history),\r\n    taskList,\r\n    auth\r\n});\r\n","export const getStatus = state => state.auth.isAdmin;\r\nexport const getTaskList = state => state.taskList.tasks;\r\n","import React from 'react';\r\nimport '$assets/styles/SingleTask.scss';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nexport default ({\r\n    index,\r\n    isAdmin,\r\n    email,\r\n    userName,\r\n    taskName,\r\n    status,\r\n    editTaskStart\r\n}) => {\r\n    const handleEditStart = () => {\r\n        editTaskStart(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"single-task\">\r\n            <div className=\"control task-name\">{taskName}</div>\r\n            <div className=\"control user-name\">{userName}</div>\r\n            <div className=\"control email\">{email}</div>\r\n            <div className=\"control is-done-block\">\r\n                <Checkbox\r\n                    className=\"control is-done-value\"\r\n                    checked={status}\r\n                    disabled\r\n                />\r\n            </div>\r\n            <div className=\"control edit-task-block\">\r\n                {\r\n                    isAdmin\r\n                        ? (\r\n                            <Button\r\n                                className=\"btn edit-task-btn\"\r\n                                onClick={handleEditStart}\r\n                            >Edit</Button>\r\n                        )\r\n                        : false\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { PureComponent, createRef } from 'react';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport SingleTask from '../single_task/SingleTask';\r\nimport Pagination from 'react-js-pagination';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport '$assets/styles/Content.scss';\r\n\r\nconst PER_PAGE = 3;\r\n\r\nexport default class Content extends PureComponent {\r\n    getCurrentList = activePage => {\r\n        const { listFull } = this.state.other;\r\n        const temp = PER_PAGE * activePage - 1;\r\n        const firstIndex = PER_PAGE * (activePage - 1);\r\n        const lastIndex = listFull.length >= temp ? temp : listFull.length - 1;\r\n\r\n        return listFull.slice(firstIndex, lastIndex + 1);\r\n    };\r\n\r\n    getCurrentIndex = indexOnPage => {\r\n        const { activePage } = this.state.other;\r\n        return (activePage - 1) * PER_PAGE + indexOnPage;\r\n    };\r\n\r\n    getArrowClass = () => {\r\n        let getClass = param => {\r\n            switch (param) {\r\n                case 'default': return 'arrow-default';\r\n                case 'top':     return 'arrow arrow-top';\r\n                case 'bottom':  return 'arrow arrow-bottom';\r\n                default: return '';\r\n            }\r\n        };\r\n        const { userName, email, status } = this.state.sort;\r\n\r\n        return {\r\n            userName: getClass(userName),\r\n               email: getClass(email),\r\n              status: getClass(status),\r\n        };\r\n    };\r\n\r\n    getArrowStatus = param => {\r\n        switch (param) {\r\n            case 'default': return 'top';\r\n            case 'bottom':  return 'top';\r\n            case 'top':     return 'bottom';\r\n            default: return '';\r\n        }\r\n    };\r\n\r\n    handleEmailChange = e => {\r\n        let allFilled =\r\n            e.target.value\r\n            &&\r\n            this.userNameRef.current.props.value\r\n            &&\r\n            this.taskNameAddRef.current.props.value\r\n        ;\r\n\r\n        if (allFilled) {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                    emailField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    addFieldsEmpty: false,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                    emailField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    addFieldsEmpty: true,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    handleUserNameChange = e => {\r\n        let allFilled =\r\n            this.emailRef.current.props.value\r\n            &&\r\n            e.target.value\r\n            &&\r\n            this.taskNameAddRef.current.props.value\r\n        ;\r\n\r\n        if (allFilled) {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                     userNameField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    addFieldsEmpty: false,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                     userNameField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    addFieldsEmpty: true,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    handleTaskNameAddChange = e => {\r\n        let allFilled =\r\n            this.emailRef.current.props.value\r\n            &&\r\n            this.userNameRef.current.props.value\r\n            &&\r\n            e.target.value\r\n        ;\r\n\r\n        if (allFilled) {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                    taskNameAddField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    addFieldsEmpty: false,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                    taskNameAddField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    addFieldsEmpty: true,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    handleTaskNameEditChange = e => {\r\n        if (e.target.value) {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                    taskNameEditField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    editFieldsEmpty: false,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                fields: {\r\n                    ...this.state.fields,\r\n                    taskNameEditField: e.target.value,\r\n                },\r\n                other: {\r\n                    ...this.state.other,\r\n                    editFieldsEmpty: true,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    handleEditTaskStart = editingIndex => {\r\n        const { listFull } = this.state.other;\r\n        this.setState({\r\n            fields: {\r\n                ...this.state.fields,\r\n                taskNameEditField: listFull[editingIndex].taskName,\r\n                      isDoneField: listFull[editingIndex].status,\r\n            },\r\n            other: {\r\n                ...this.state.other,\r\n                editingIndex,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleEditTaskFinish = () => {\r\n        const { editTask } = this.props;\r\n        const { editingIndex } = this.state.other;\r\n\r\n        editTask(\r\n            editingIndex,\r\n            this.taskNameEditRef.current.props.value,\r\n            this.doneRef.current.props.checked\r\n        );\r\n        this.setState({\r\n            fields: {\r\n                ...this.state.fields,\r\n                taskNameEditField: '',\r\n            },\r\n            other: {\r\n                ...this.state.other,\r\n                editingIndex: -1,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleKeyDownAdd = e => {\r\n        const { addFieldsEmpty } = this.state.other;\r\n\r\n        if (e.keyCode === 13) {\r\n            if (!addFieldsEmpty) {\r\n                this.handleAddTask();\r\n            }\r\n        }\r\n    };\r\n\r\n    handleKeyDownEdit = e => {\r\n        const { editFieldsEmpty } = this.state.other;\r\n\r\n        if (e.keyCode === 13) {\r\n            if (!editFieldsEmpty) {\r\n                this.handleEditTaskFinish();\r\n            }\r\n        }\r\n    };\r\n\r\n    handleDoneChange = e => {\r\n        this.setState({\r\n            fields: {\r\n                ...this.state.fields,\r\n                isDoneField: e.target.checked\r\n            }\r\n        });\r\n    };\r\n\r\n    handleLogout = () => {\r\n        const { logout } = this.props;\r\n        logout();\r\n    };\r\n\r\n    handleLogin = () => {\r\n        const { push } = this.props;\r\n        push('/auth');\r\n    };\r\n\r\n    handleAddTask = () => {\r\n        const { addTask } = this.props;\r\n\r\n        addTask(\r\n            this.emailRef.current.props.value,\r\n            this.userNameRef.current.props.value,\r\n            this.taskNameAddRef.current.props.value\r\n        );\r\n        this.setState({\r\n            fields: {\r\n                ...this.setState.fields,\r\n                      emailField: '',\r\n                   userNameField: '',\r\n                taskNameAddField: '',\r\n            },\r\n            other: {\r\n                ...this.state.other,\r\n                addFieldsEmpty: true,\r\n            },\r\n        });\r\n    };\r\n\r\n    handlePageChange = activePage => {\r\n        this.setState({\r\n            other: {\r\n                ...this.state.other,\r\n                activePage,\r\n                listOnCurrentPage: this.getCurrentList(activePage),\r\n            }\r\n        });\r\n    };\r\n\r\n    getListFullSorted = key => {\r\n        const { listFull } = this.state.other;\r\n        const param = this.state.sort[key];\r\n\r\n        listFull.sort(\r\n            (a, b) => {\r\n                let cond = (param === 'top') ? (b[key] > a[key]) : (a[key] > b[key]);\r\n\r\n                if (cond) return 1;\r\n                else return -1;\r\n            }\r\n        );\r\n\r\n        return listFull;\r\n    };\r\n\r\n    handleSortUsername = () => {\r\n        const { userName } = this.state.sort;\r\n\r\n        this.setState({\r\n            sort: {\r\n                userName: this.getArrowStatus(userName),\r\n                   email: 'default',\r\n                  status: 'default',\r\n            }\r\n        });\r\n        this.updateLists(\r\n            this.getListFullSorted('userName')\r\n        )\r\n    };\r\n\r\n    handleSortEmail = () => {\r\n        const { email } = this.state.sort;\r\n\r\n        this.setState({\r\n            sort: {\r\n                userName: 'default',\r\n                email: this.getArrowStatus(email),\r\n                status: 'default',\r\n            }\r\n        });\r\n        this.updateLists(\r\n            this.getListFullSorted('email')\r\n        )\r\n    };\r\n\r\n    handleSortStatus = () => {\r\n        const { status } = this.state.sort;\r\n\r\n        this.setState({\r\n            sort: {\r\n                userName: 'default',\r\n                email: 'default',\r\n                status: this.getArrowStatus(status),\r\n            }\r\n        });\r\n        this.updateLists(\r\n            this.getListFullSorted('status')\r\n        )\r\n    };\r\n\r\n    updateLists = taskList => {\r\n        const { activePage } = this.state.other;\r\n\r\n        this.setState(\r\n            {\r\n                other: {\r\n                    ...this.state.other,\r\n                    listFull: taskList,\r\n                }\r\n            },\r\n            () => {\r\n                this.setState({\r\n                    other: {\r\n                        ...this.state.other,\r\n                        listOnCurrentPage: this.getCurrentList(activePage),\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fields: {\r\n                       emailField: '',\r\n                    userNameField: '',\r\n                 taskNameAddField: '',\r\n                taskNameEditField: '',\r\n                      isDoneField: false,\r\n            },\r\n            sort: {\r\n                userName: 'default',\r\n                   email: 'default',\r\n                  status: 'default',\r\n            },\r\n            other: {\r\n                         listFull: props.taskList,\r\n                listOnCurrentPage: [],\r\n                       activePage: 1,\r\n                     editingIndex: -1,\r\n                   addFieldsEmpty: true,\r\n                  editFieldsEmpty: false,\r\n            },\r\n        };\r\n        this.emailRef = createRef();\r\n        this.taskNameAddRef = createRef();\r\n        this.userNameRef = createRef();\r\n        this.taskNameEditRef = createRef();\r\n        this.doneRef = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateLists(this.props.taskList);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.taskList.length !== prevProps.taskList.length) {\r\n            this.updateLists(this.props.taskList);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isAdmin } = this.props;\r\n        const {\r\n            emailField,\r\n            userNameField,\r\n            taskNameAddField,\r\n            taskNameEditField,\r\n            isDoneField,\r\n        } = this.state.fields;\r\n        const {\r\n            listFull,\r\n            listOnCurrentPage,\r\n            activePage,\r\n            editingIndex,\r\n            addFieldsEmpty,\r\n            editFieldsEmpty,\r\n        } = this.state.other;\r\n\r\n        const isEditing = editingIndex > -1;\r\n        const isAddBlock = isAdmin ? !isEditing : true;\r\n        const arrowClass = this.getArrowClass();\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"auth-panel\">\r\n                    {\r\n                        isAdmin\r\n                            ? (\r\n                                <Button\r\n                                    className=\"btn logout-btn\"\r\n                                    disabled={isEditing}\r\n                                    onClick={this.handleLogout}\r\n                                >Logout</Button>\r\n                            )\r\n                            : (\r\n                                <Button\r\n                                    className=\"btn login-btn\"\r\n                                    disabled={isEditing}\r\n                                    onClick={this.handleLogin}\r\n                                >Login</Button>\r\n                            )\r\n                    }\r\n                </div>\r\n                <div className=\"main-panel\">\r\n                    <div className=\"sort-panel\">\r\n                        <div className=\"sort sort-username\" onClick={this.handleSortUsername}>\r\n                            <div className={arrowClass.userName} />\r\n                        </div>\r\n                        <div className=\"sort sort-email\" onClick={this.handleSortEmail}>\r\n                            <div className={arrowClass.email} />\r\n                        </div>\r\n                        <div className=\"sort sort-status\" onClick={this.handleSortStatus}>\r\n                            <div className={arrowClass.status} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"list\">\r\n                        {\r\n                            listOnCurrentPage\r\n                                ? (\r\n                                    listOnCurrentPage.map(\r\n                                        (task, index) => (\r\n                                            <SingleTask\r\n                                                key={this.getCurrentIndex(index)}\r\n                                                index={this.getCurrentIndex(index)}\r\n                                                isAdmin={isAdmin}\r\n                                                email={task.email}\r\n                                                userName={task.userName}\r\n                                                taskName={task.taskName}\r\n                                                status={task.status}\r\n                                                editTaskStart={this.handleEditTaskStart}\r\n                                            />\r\n                                        )\r\n                                    )\r\n                                )\r\n                                : false\r\n                        }\r\n\r\n                    </div>\r\n                    <Pagination\r\n                        hideDisabled\r\n                        activePage={activePage}\r\n                        itemsCountPerPage={PER_PAGE}\r\n                        totalItemsCount={listFull.length}\r\n                        pageRangeDisplayed={3}\r\n                        onChange={this.handlePageChange}\r\n                    />\r\n                </div>\r\n                {\r\n                    isAddBlock\r\n                        ? (\r\n                            <div className=\"bottom add-task\">\r\n                                <TextField\r\n                                    className=\"field email\"\r\n                                    value={emailField}\r\n                                    helperText=\"Email\"\r\n                                    ref={this.emailRef}\r\n                                    onChange={this.handleEmailChange}\r\n                                    onKeyDown={this.handleKeyDownAdd}\r\n                                    autoFocus={true}\r\n                                />\r\n                                <TextField\r\n                                    className=\"field user-name\"\r\n                                    value={userNameField}\r\n                                    helperText=\"UserName\"\r\n                                    ref={this.userNameRef}\r\n                                    onChange={this.handleUserNameChange}\r\n                                    onKeyDown={this.handleKeyDownAdd}\r\n                                />\r\n                                <TextField\r\n                                    className=\"field task-name-add\"\r\n                                    value={taskNameAddField}\r\n                                    helperText=\"TaskName\"\r\n                                    ref={this.taskNameAddRef}\r\n                                    onChange={this.handleTaskNameAddChange}\r\n                                    onKeyDown={this.handleKeyDownAdd}\r\n                                />\r\n                                <Button\r\n                                    className=\"btn add-task-btn\"\r\n                                    onClick={this.handleAddTask}\r\n                                    disabled={addFieldsEmpty}\r\n                                >Add task</Button>\r\n                            </div>\r\n                        )\r\n                        : (\r\n                            <div className=\"bottom edit-task\">\r\n                                <TextField\r\n                                    className=\"field task-name-edit\"\r\n                                    value={taskNameEditField}\r\n                                    helperText=\"Login\"\r\n                                    type=\"text\"\r\n                                    ref={this.taskNameEditRef}\r\n                                    onChange={this.handleTaskNameEditChange}\r\n                                    onKeyDown={this.handleKeyDownEdit}\r\n                                />\r\n                                <div className=\"is-done-block\">\r\n                                    <div className=\"is-done-label\">Done:</div>\r\n                                    <Checkbox\r\n                                        className=\"is-done-value\"\r\n                                        checked={isDoneField}\r\n                                        onChange={this.handleDoneChange}\r\n                                        ref={this.doneRef}\r\n                                    />\r\n                                </div>\r\n                                <Button\r\n                                    className=\"btn edit-task-btn\"\r\n                                    onClick={this.handleEditTaskFinish}\r\n                                    disabled={editFieldsEmpty}\r\n                                >Edit task</Button>\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        )\r\n    };\r\n}\r\n","import { ADD_TASK, EDIT_TASK_NAME, DONE_TASK, UNDONE_TASK, LOGOUT } from '$const/actionTypes';\r\nimport { connect as reactConnect } from 'react-redux';\r\nimport { getStatus, getTaskList } from '$store/selectors/index';\r\nimport { push as routerPush } from 'connected-react-router';\r\nimport Content from './Content';\r\n\r\nconst mapStateToProps = state => ({\r\n     isAdmin: getStatus(state),\r\n    taskList: getTaskList(state),\r\n});\r\nconst mapDispatchToProps = {\r\n    addTask: (email, userName, taskName) => dispatch => {\r\n        dispatch({\r\n            type: ADD_TASK,\r\n            value: {\r\n                userName,\r\n                email,\r\n                taskName,\r\n            },\r\n        });\r\n    },\r\n    editTask: (index, newTaskName, status) => dispatch => {\r\n        dispatch({\r\n            type: EDIT_TASK_NAME,\r\n            value: { index, newTaskName },\r\n        });\r\n\r\n        if (status) {\r\n            dispatch({\r\n                type: DONE_TASK,\r\n                value: { index, status },\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: UNDONE_TASK,\r\n                value: { index, status },\r\n            });\r\n        }\r\n    },\r\n    logout: () => dispatch => {\r\n        dispatch({ type: LOGOUT });\r\n    },\r\n    push: path => dispatch => {\r\n        dispatch(routerPush(path));\r\n    },\r\n};\r\nconst connect = reactConnect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport default connect(Content);\r\n","export default {\r\n       login: '1',\r\n    password: '1',\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport cred from '$const/credentials';\r\nimport '$assets/styles/AuthForm.scss';\r\n\r\nexport default class AuthForm extends PureComponent {\r\n    handleLoginChange = e => {\r\n        this.setState({\r\n            ...this.state,\r\n            login: e.target.value,\r\n        });\r\n    };\r\n\r\n    handlePasswordChange = e => {\r\n        this.setState({\r\n            ...this.state,\r\n            password: e.target.value,\r\n        });\r\n    };\r\n\r\n    handleSignIn = () => {\r\n        const { login, push } = this.props;\r\n        if (\r\n            this.state.login === cred.login\r\n            &&\r\n            this.state.password === cred.password\r\n        ) {\r\n            login();\r\n            push('/list');\r\n        } else {\r\n            this.setState({\r\n                ...this.state,\r\n                showError: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleKeyDown = e => {\r\n        this.setState({\r\n            ...this.state,\r\n            showError: false,\r\n        });\r\n\r\n        if (e.keyCode === 13) {\r\n            this.handleSignIn();\r\n        }\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const { isAdmin, push } = props;\r\n\r\n        if (isAdmin) push('/');\r\n\r\n        this.state = {\r\n                login: '',\r\n             password: '',\r\n            showError: false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { login, password, showError } = this.state;\r\n\r\n        return (\r\n            <div className=\"auth-form\">\r\n                <TextField\r\n                    className=\"field login\"\r\n                    helperText=\"Login\"\r\n                    value={login}\r\n                    onKeyDown={this.handleKeyDown}\r\n                    onChange={this.handleLoginChange}\r\n                    autoFocus={true}\r\n                    placeholder=\"admin\"\r\n                />\r\n                <TextField\r\n                    className=\"field password\"\r\n                    helperText=\"Password\"\r\n                    value={password}\r\n                    onKeyDown={this.handleKeyDown}\r\n                    onChange={this.handlePasswordChange}\r\n                    placeholder=\"123\"\r\n                />\r\n                <Button\r\n                    className=\"btn signIn-btn\"\r\n                    onClick={this.handleSignIn}\r\n                >Sign in</Button>\r\n                {\r\n                    showError\r\n                        ? <div className=\"error\">Wrong!</div>\r\n                        : <div className=\"error\" />\r\n                }\r\n            </div>\r\n        )\r\n    };\r\n}\r\n","import { LOGIN } from '$const/actionTypes';\r\nimport { push as routerPush } from 'connected-react-router';\r\nimport { connect as reactConnect } from 'react-redux';\r\nimport { getStatus } from '$store/selectors/index';\r\nimport AuthForm from './AuthForm';\r\n\r\nconst mapStateToProps = state => ({\r\n    isAdmin: getStatus(state)\r\n});\r\nconst mapDispatchToProps = {\r\n    push: path => dispatch => {\r\n        dispatch(routerPush(path));\r\n    },\r\n    login: () => dispatch => {\r\n        dispatch({ type: LOGIN });\r\n    }\r\n};\r\nconst connect = reactConnect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport default connect(AuthForm);\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n\r\nexport default createMuiTheme({\r\n\ttypography: {\r\n\t\tuseNextVariants: true,\r\n\t}\r\n});","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from '$store/storage/index';\r\nimport { history } from '$store/storage/dev_tools';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport Routes from '$routes/index';\r\nimport appRoutes from '$routes/appRoutes';\r\nimport theme from '$assets/themes/MainTheme';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nexport default (\r\n    <MuiThemeProvider theme={theme}>\r\n   \t\t<Provider store={store}>\r\n        \t<ConnectedRouter history={history}>\r\n\t\t\t\t<Routes getUrls={appRoutes} />\r\n        \t</ConnectedRouter>\r\n\t\t</Provider>\r\n    </MuiThemeProvider>\r\n);\r\n","import React from 'react';\r\nimport { Switch } from 'react-router-dom';\r\n\r\nconst getActions = urls => {\r\n\treturn urls.map(\r\n\t\t(route, index) => {\r\n\t\t\tconst Action = route.action;\r\n\t\t\tconst isExact = route.exact;\r\n\r\n\t\t\tdelete route.action;\r\n\t\t\tdelete route.exact;\r\n\r\n\t\t\treturn (\r\n\t\t\t\tisExact\r\n\t\t\t\t\t? <Action key={index} {...route} exact />\r\n\t\t\t\t\t: <Action key={index} {...route} />\r\n\t\t\t);\r\n\t\t}\r\n\t);\r\n};\r\n\r\nexport default ({ getUrls }) => (\r\n\t<Switch>\r\n\t\t{ getActions(getUrls()) }\r\n\t</Switch>\r\n);\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport TaskList from '$comp/task_list/content/index';\r\nimport AuthForm from '$comp/auth_form/index';\r\n\r\nexport default () => {\r\n    const main = [\r\n        {\r\n            action: Route,\r\n            path: '/',\r\n            component: TaskList,\r\n            exact: true\r\n        },\r\n        {\r\n            action: Route,\r\n            path: '/auth',\r\n            component: AuthForm,\r\n            exact: true\r\n        }\r\n    ];\r\n    const support = [\r\n        {\r\n            action: Redirect,\r\n            from: '/*',\r\n            to: '/',\r\n            exact: false\r\n        }\r\n    ];\r\n\r\n    return main.concat(support);\r\n};\r\n","import { render } from 'react-dom';\nimport app from './app/index';\nimport '$assets/styles/index.scss';\n\nconst root = document.getElementById('root');\n\nrender(app, root);\n"],"sourceRoot":""}